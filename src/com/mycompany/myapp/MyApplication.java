package com.mycompany.myapp;


import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Component;
import com.mycompany.entities.Adresse;
import com.mycompany.entities.Commande;
import com.mycompany.entities.Panier;
import com.mycompany.entities.Produit;
import com.mycompany.gui.AdresseForm;
import com.mycompany.gui.CellulePanier;
import com.mycompany.gui.CelluleProduit;
import com.mycompany.gui.HomeForm;
import com.mycompany.gui.ListeCommandeForm;
import com.mycompany.gui.ListePaniersForm;
import com.mycompany.gui.ListeProduitsForm;
import com.mycompany.gui.StatCommandeFrom;
import com.mycompany.gui.TestStatForm;
import com.mycompany.services.ServiceAdresse;
import com.mycompany.services.ServiceCommande;
import com.mycompany.services.ServicePanier;
import com.mycompany.services.ServiceProduit;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        //Adresse adresse = new Adresse(66, "rr", "rr", "ggg", 112);
        //ServiceAdresse.getInstance().addAdresse(adresse);
        
        //new AdresseForm().show();
        
        /*Form hi = new Form("Hi World", BoxLayout.y());
        hi.add(new Label("Hi World"));*/
        
        //new ListePaniersForm().show();
        //new ListeProduitsForm().show();
        //ServiceTask.getInstance().getAllTasks().toString()
        /*ServicePanier.getInstance().getAllPaniers().toString();
        for (Panier panier : ServicePanier.getInstance().getAllPaniers()) {
            System.out.println("hh = "+panier);
        }*/
        
        /*for (Produit produit : ServiceProduit.getInstance().getAllProduits()) {
            System.out.println(produit);
        }
        new ListeProduitsForm().show();*/
        //hi.show();
        //ServiceCommande.getInstance().getAllCommandeClient(1)
        /*for (Commande commade : ServiceCommande.getInstance().getAllCommandeClient(1)) {
            System.out.println(commade);
        }*/
        //new ListeCommandeForm().show();
        
        
        
        new HomeForm().show();
        //new StatCommandeFrom().createPieChartForm().show();
        //new TestStatForm().show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
